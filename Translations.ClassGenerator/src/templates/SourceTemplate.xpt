«REM»
Name:          SourceTemplate.xpt 
Description:   This template is used to generate source files for the classes

Creation Date: 2/21/2020
Created By:    Ahmed Karairbahimov
Last Update:   2/21/2020
Updated By:    Ahmed Karaibrahimov
«ENDREM»

«IMPORT ecore»

«EXTENSION extensions::Misc»

«DEFINE CreateSourceFile FOR EClass»
	«FILE "src/" + name + ".cpp"»
		//================================================================================================================
		// Copyright <2020> <Ahmed Karaibrahimov>

		// Permission is hereby granted, free of charge, to any person obtaining a copy of this software 
		// and associated documentation files (the "Software"), to deal in the Software without restriction, 
		// including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
		// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
		// subject to the following conditions:

		// The above copyright notice and this permission notice shall be included in all copies or substantial 
		// portions of the Software.

		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED 
		// TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
		// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
		// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
		// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
		//================================================================================================================
	
		#include «name».hpp
		
		«EXPAND templates::HeaderTemplate::GenerateNamespace(true) FOR this»
		
		// Argumented constructor
		«name»::«name»(«EXPAND templates::HeaderTemplate::GetAllConstructorArguments FOR this»)
		:
			«EXPAND GetAllConstructorArgumentsInitialization FOR this»
		{
		}
		
		// Getters and setters
		«EXPAND CreateAllGettersAndSettersImplementation FOR this»
		
		«EXPAND templates::HeaderTemplate::GenerateNamespace(false) FOR this»	
	«ENDFILE»
«ENDDEFINE»

«REM»List all the member initializations«ENDREM»
«DEFINE GetAllConstructorArgumentsInitialization FOR EClass»
	«FOREACH this.eAllAttributes AS attribute ITERATOR iter»
		m_«attribute.name»{«attribute.name»}«IF iter.counter1 < this.eAttributes.size»,«ENDIF»
	«ENDFOREACH»
	«IF eAllAttributes.size > 0 && eAllReferences.size > 0»,«ENDIF»
	«FOREACH this.eAllReferences AS reference ITERATOR iter»
		m_«reference.name»{«reference.name»}«IF iter.counter1 < this.eAllReferences.size»,«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»

«REM»Generate all the getters and setters implementations«ENDREM»
«DEFINE CreateAllGettersAndSettersImplementation FOR EClass»
	«FOREACH this.eAllAttributes AS attribute»
		«attribute.getType()» «name»::get«attribute.name»() const
		{
			return m_«attribute.name»;
		}
		
		void «name»::set«attribute.name»«attribute.getType()» value)
		{
			m_«attribute.name» = value;
		}
	«ENDFOREACH»
	«FOREACH this.eAllReferences AS reference»
		«reference.getType()» «name»::get«reference.name»() const
		{
			return m_«reference.name»;
		}
		
		void «name»::set«reference.name»(«reference.getType()» value)
		{
			m_«reference.name» = value;
		}
	«ENDFOREACH»
«ENDDEFINE»